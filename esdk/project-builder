#!/usr/bin/python -tt
###############################################################################

import sys, os

from getopt import *

sys.path.insert(0, '/usr/share/esdk/lib')
from SDK import *

def usage():
    print >> sys.stderr, """Usage: project-builder [ARGS...]

    No arguments        Open GUI... so easy a caveman could do it
    --help              Print this message
    --command=CMD       Where CMD is one of list-platforms, list-projects,
                        list-targets, list-fsets, create-project,
                        create-target, install-fset, delete-target,
                        or delete-project
                        
    --platform_name=PLATFORM
    --project_name=PROJECT
    --project_desc=DESC
    --project_path=PATH
    --target_name=TARGET
    --fset=FSET
    
<Adding a new project>
    project-builder --command=create-project \\
                    --platform_name='donley' \\
                    --project_name='MyProject' \\
                    --project_desc='Example project' \\
                    --project_path=/usr/src/projects/myproject

<Delete a project>
    project-builder --command=delete-project \\
                    --project_name='MyOtherProject'

<Adding a new target to an existing project>
    project-builder --command=create-target \\
                    --project_name='MyProject' \\
                    --target_name='MyTarget'

<Delete a target>
    project-builder --command=delete-target \\
                    --project_name='MyProject' \\
                    --target_name='MyOtherTarget'

<installing an fset into a given target>
    project-builder --command=install-fset \\
                    --platform_name='donley' \\
                    --project_name='MyProject' \\
                    --target_name='MyTarget' \\
                    --fset='Core'
    
"""
    sys.exit(1)
    
def list_platforms():
    sdk = SDK()

    print "Available platforms: "
    for key in sdk.platforms.keys():
        print "\t%s" % (sdk.platforms[key].name)

def list_projects():
    sdk = SDK()

    print "Existing projects: "
    for key in sdk.projects.keys():
        p = sdk.projects[key]
        print """
        Name:        %s
        Path:        %s
        Description: %s
        Platform:    %s
""" % (p.name, p.path, p.desc, p.platform.name)

def list_fsets(platform):
    sdk = SDK()
    print "Available fsets for the %s platform: " % (platform)
    for key in sdk.platforms[platform].fset.fsets.keys():
        print "\t%s" % (sdk.platforms[platform].fset.fsets[key].name)

def list_targets(project):
    sdk = SDK()    
    print "Installed targets in the %s project:" % (project)
    for key in sdk.projects[project].targets.keys():
        print "\t%s" % (sdk.projects[project].targets[key].name)

def create_project(platform, name, desc, path):
    sdk = SDK()

    if sdk.projects.has_key(name):
        print >> sys.stderr, "project %s already exists!" % (name)
        sys.exit(1)
    
    proj = sdk.create_project(path, name, desc, sdk.platforms[platform])
    proj.install()
    proj.mount()

def delete_project(project_name):
    print "Implement me!"
    
def create_target(project, name):
    sdk = SDK()

    if not sdk.projects.has_key(project):
        print >> sys.stderr, "project %s does not exists" % (project)
        sys.exit(1)
    
    target = sdk.projects[project].create_target(name)

def delete_target(project_name, target_name):
    print "Implement me!"
    
def install_fset(platform_name, project_name, target_name, fset_name):
    sdk = SDK()

    if not sdk.projects.has_key(project_name):
        print >> sys.stderr, "project %s does not exists" % (project_name)
        sys.exit(1)

    if not sdk.projects[project_name].targets.has_key(target_name):
        print >> sys.stderr, "target %s does not exists" % (target_name)
        sys.exit(1)
    
    if not sdk.platforms[platform_name].fset.fsets.has_key(fset_name):
        print >> sys.stderr, "fset %s does not exists" % (fset_name)
        sys.exit(1)

    fset = sdk.platforms[platform_name].fset.fsets[fset_name]
    target = sdk.projects[project_name].targets[target_name]

    target.install(fset)
    
if __name__ == '__main__':

    try:
        (args, extras) = getopt(sys.argv[1:], '', ['help',
                                                   'command=',
                                                   'platform_name=',
                                                   'project_name=',
                                                   'project_desc=',
                                                   'project_path=',
                                                   'target_name=',
                                                   'fset='])
    except:
        print sys.exc_value
        usage()
    
    if len(extras) > 0:
        usage()
        
    if (len(args) == 0):
        from gui import *
        esdkMain()
        gtk.main()
        sys.exit(0)
        
    command = ''
    platform_name = ''
    project_name = ''
    project_desc = ''
    project_path = ''
    target_name = ''
    fset = ''
    for i in args:
        if i[0] == '--help':
            usage()
            
        elif i[0] == '--command':
            command = i[1]
            
        elif i[0] == '--platform_name':
            platform_name = i[1]

        elif i[0] == '--project_name':
            project_name = i[1]

        elif i[0] == '--project_desc':
            project_desc = i[1]

        elif i[0] == '--project_path':
            project_path = i[1]

        elif i[0] == '--target_name':
            target_name = i[1]

        elif i[0] == '--fset':
            fset = i[1]

    if command == 'list-platforms':
        list_platforms()
        
    elif command == 'list-projects':
        list_projects()
        
    elif command == 'list-targets':
        if len(project_name) == 0:
            usage()

        list_targets(project_name)
        
    elif command == 'list-fsets':
        if len(platform_name) == 0:
            usage()

        list_fsets(platform_name)
            
    elif command == 'create-project':
        if len(platform_name) == 0 or len(project_name) == 0 or len(project_desc) == 0 or len(project_path) == 0:
            usage()

        create_project(platform_name, project_name, project_desc, project_path)
        
    elif command == 'delete-project':
        if len(project_name) == 0:
            usage()

        delete_project(project_name)
        
    elif command == 'create-target':
        if len(project_name) == 0 or len(target_name) == 0:
            usage()

        create_target(project_name, target_name)

    elif command == 'delete-target':
        if len(project_name) == 0 or len(target_name) == 0:
            usage()

        delete_target(project_name, target_name)
            
    elif command == 'install-fset':
        if len(platform_name) == 0 or len(project_name) == 0 or len(target_name) == 0 or len(fset) == 0:
            usage()

        install_fset(platform_name, project_name, target_name, fset)
        
    else:
        usage()
