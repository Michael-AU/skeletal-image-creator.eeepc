#!/usr/bin/python -tt
# vim: ai ts=4 sts=4 et sw=4
###############################################################################

import sys, os, string

from optparse import OptionParser

sys.path.insert(0, '/usr/share/esdk/lib')
from SDK import *

try:
    from gui import *
except:
    # Probably running in a text console
    pass

# Delete any environment variables that may cause problems.
# FIXME: Before releasing outside of Intel, we should stop deleting http_proxy
for bad_env in [ 'http_proxy' ]:
    if bad_env in os.environ:
        print "Warning: %s environment variable is set.  Deleting it." % bad_env
        del os.environ[bad_env]

def main():
    if sys.hexversion < 0x2040000:
        print >> sys.stderr, "Error: %s depends on a Python version of at least 2.4!" % (sys.argv[0])
        sys.exit(1)

    if len(sys.argv) == 1:
        try:
            esdkMain()
            gtk.main()
            return 0
        except:
            print "Error: Unable to run the GUI, maybe you are in a text console"
            print "Do -h for help"
            return 1

    options, args = parseCommandLine()
    if options.cmd == "list-platforms":
        list_platforms()
    elif options.cmd == "list-projects":
        list_projects()
    elif options.cmd == 'list-targets':
        list_targets(options)
    elif options.cmd == 'list-fsets':
        list_fsets(options)
    elif options.cmd == 'create-project':
        create_project(options)
    elif options.cmd == 'delete-project':
        delete_project(options)
    elif options.cmd == 'create-target':
        create_target(options)
    elif options.cmd == 'delete-target':
        delete_target(options)
    elif options.cmd == 'install-fset':
        install_fset(options)
    elif options.cmd == 'update-project':
        update_project(options)
    elif options.cmd == 'update-target':
        update_target(options)
    elif options.cmd in ['create-live-iso', 'create-install-iso', 'create-live-usb', 'create-install-usb']:
        create_image(options)
    else:
        print "Unknown command specified"
        return 1
    return 0
        

def parseCommandLine():
    valid_commands = [ "list-platforms", "list-projects", "list-targets",
                       "list-fsets", "create-project", "create-target",
                       "install-fset", "delete-target", "delete-project",
                       "create-live-iso", "create-install-iso",
                       "create-live-usb", "create-install-usb",
                       "update-project", "update-target"]
    valid_commands.sort()
    valid_command_string = ""
    for command in valid_commands[:-1]:
        valid_command_string += "%s, " %  command
    valid_command_string += "or %s" % valid_commands[-1]

    parser = OptionParser(add_help_option=False)

    parser.add_option("-c", "--command", dest="cmd",
        help="Where CMD is one of: %s" % valid_command_string, metavar="CMD")
    parser.add_option("--platform-name", dest="platform_name",
        help="Platform name")
    parser.add_option("--project-name", dest="project_name",
        help="Project name")
    parser.add_option("--project-description", dest="project_desc",
        help="Project description")
    parser.add_option("--project-path", dest="project_path",
        help="Project path")
    parser.add_option("-t", "--target-name", dest="target_name",
        help="Target name")
    parser.add_option("--fset-name", dest="fset_name",
        help="Feature set identifier")
    parser.add_option("--image-name", dest="image_name",
        help="Name to use for target image file")
    parser.add_option("-q", "--quiet",
        action="store_false", dest="verbose", default=True,
        help="don't print status messages to stdout")
    parser.add_option("-d", "--enable-debug",
        action="store_true", dest="debug", default=False,
        help="Enable additional debug package while installing fsets")
    parser.add_option("-h", "--help", help="show this help message and exit",
        dest = "help", action="store_true", default=False)
    examples = """
Examples:
<Adding a new project>
    project-builder --command=create-project \\
                    --platform-name='donley' \\
                    --project-name='MyProject' \\
                    --project-desc='Example project' \\
                    --project-path=/usr/src/projects/myproject

<Delete a project>
    project-builder --command=delete-project \\
                    --project-name='MyOtherProject'

<Adding a new target to an existing project>
    project-builder --command=create-target \\
                    --project-name='MyProject' \\
                    --target-name='MyTarget'

<Delete a target>
    project-builder --command=delete-target \\
                    --project-name='MyProject' \\
                    --target-name='MyOtherTarget'

<installing an fset into a given target>
    project-builder --command=install-fset \\
                    --platform-name='donley' \\
                    --project-name='MyProject' \\
                    --target-name='MyTarget' \\
                    --fset='Core' \\

<updating a given target inside a project>
    project-builder --command=update-target \\
                    --project-name='MyProject' \\
                    --target-name='MyTarget' \\

<updating a given project>
    project-builder --command=update-project \\
                    --project-name='MyProject'"""

    (options, args) = parser.parse_args()
    # if nothing at all is passed in then return back
    if not options and not args:
        return options, args
    if options.help:
        parser.print_help()
        print
        print examples
        sys.exit(0)
    # now lets validate stuff
    if not options.cmd:
        parser.error("Must specify a -c/--command argument")
    if options.cmd not in valid_commands:
        parser.error("Command specified for option -c/--command invalid.  Valid commands are: %s" % valid_command_string)
    if options.cmd == 'list-targets' and not options.project_name:
        parser.error("Must specify a project-name when using %s command." % options.cmd)
    if options.cmd == "list-fsets" and not options.platform_name:
        parser.error("Must specify platform-name when using %s command" % options.cmd)
    if options.cmd == "create-project":
        if not options.platform_name:
            parser.error("Must specify platform-name when using %s command" % options.cmd)
        if not options.project_name:
            parser.error("Must specify project-name when using %s command" % options.cmd)
        if not options.project_desc:
            parser.error("Must specify project-description when using %s command" % options.cmd)
        if not options.project_path:
            parser.error("Must specify project-path when using %s command" % options.cmd)
    if options.cmd == "delete-project" and not options.project_name:
        parser.error("Must specify project-name when using %s command" % options.cmd)
    if options.cmd == "update-project" and not options.project_name:
        parser.error("Must specify project-name when using %s command" % options.cmd)
    if options.cmd == "create-target" or options.cmd == "delete-target" or options.cmd == "update-target":
        if not options.project_name:
            parser.error("Must specify project-name when using %s command" % options.cmd)
        if not options.target_name:
            parser.error("Must specify target-name when using %s command" % options.cmd)
    if options.cmd == "install-fset":
        if not options.platform_name:
            parser.error("Must specify platform-name when using %s command" % options.cmd)
        if not options.project_name:
            parser.error("Must specify project-name when using %s command" % options.cmd)
        if not options.target_name:
            parser.error("Must specify target-name when using %s command" % options.cmd)
        if not options.fset_name:
            parser.error("Must specify fset-name when using %s command" % options.cmd)
    if options.cmd == "create-live-iso" or options.cmd == "create-install-iso" or options.cmd == "create-live-usb" or options.cmd == "create-install-usb":
        if not options.project_name:
            parser.error("Must specify project-name when using %s command" % options.cmd)
        if not options.target_name:
            parser.error("Must specify target-name when using %s command" % options.cmd)
        if not options.image_name:
            parser.error("Must specify image-name when using %s command" % options.cmd)
    if options.project_path:
        options.project_path = os.path.abspath(os.path.expanduser(options.project_path))

    return options, args
    
def list_platforms():
    sdk = SDK()
    for key in sorted(sdk.platforms.iterkeys()):
        print "%s" % (sdk.platforms[key].name)

def list_projects():
    sdk = SDK()
    for key in sorted(sdk.projects.iterkeys()):
        print "%s ==> %s" % (sdk.projects[key].name, sdk.projects[key].path)

def list_fsets(options):
    sdk = SDK()
    if options.platform_name not in sdk.platforms:
        raise ValueError, "%s: is not a valid platform name" % options.platform_name
    for key in sorted(sdk.platforms[options.platform_name].fset.iterkeys()):
        print "%s" % (sdk.platforms[options.platform_name].fset[key].name)

def list_targets(options):
    sdk = SDK()    
    for key in (sdk.projects[options.project_name].targets.iterkeys()):
        print "%s" % (sdk.projects[options.project_name].targets[key].name)

def create_project(options):
    sdk = SDK()
    if options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s already exist!" % (options.project_name)
        sys.exit(1)
    cwd = os.getcwd()
    if cwd.find(options.project_path) == 0:
	    print >> sys.stderr, "The project path can not be part of the current working directory"
	    sys.exit(1)
    proj = sdk.create_project(options.project_path, options.project_name, options.project_desc, sdk.platforms[options.platform_name])
    proj.install()
    proj.mount()

def delete_project(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    sdk.delete_project(options.project_name)

def update_project(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    sdk.projects[options.project_name].update()
    
def create_target(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    target = sdk.projects[options.project_name].create_target(options.target_name)

def delete_target(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    proj = sdk.projects[options.project_name]
    if not options.target_name in proj.targets:
        print >> sys.stderr, "Target %s does not exist" % (options.target_name)
        sys.exit(1)
    proj.delete_target(options.target_name)

def update_target(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    proj = sdk.projects[options.project_name]
    if not options.target_name in proj.targets:
        print >> sys.stderr, "Target %s does not exist" % (options.target_name)
        sys.exit(1)
    proj.targets[options.target_name].update()
    
def install_fset(options):
    sdk = SDK()
    if not options.project_name in sdk.projects:
        print >> sys.stderr, "Project %s does not exist" % (options.project_name)
        sys.exit(1)
    if not options.target_name in sdk.projects[options.project_name].targets:
        print >> sys.stderr, "Target %s does not exist" % (options.target_name)
        sys.exit(1)
    if not options.fset_name in sdk.platforms[options.platform_name].fset:
        print >> sys.stderr, "Feature set %s does not exist" % (options.fset_name)
        sys.exit(1)
    fset = sdk.platforms[options.platform_name].fset[options.fset_name]
    target = sdk.projects[options.project_name].targets[options.target_name]
    target.install(fset, options.debug)

def create_image(options):
    sdk = SDK()
    proj = sdk.projects[options.project_name]
    if options.cmd == 'create-live-iso':
        proj.create_live_iso(options.target_name, options.image_name)
    elif options.cmd == 'create-install-iso':
        proj.create_install_iso(options.target_name, options.image_name)
    elif options.cmd == 'create-live-usb':
        proj.create_live_usb(options.target_name, options.image_name)
    elif options.cmd == 'create-install-usb':
        proj.create_install_usb(options.target_name, options.image_name)

if __name__ == '__main__':
    sys.exit(main())
